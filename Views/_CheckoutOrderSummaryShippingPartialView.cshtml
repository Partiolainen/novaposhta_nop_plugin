@using Nop.Services.Common
@using Nop.Core.Domain.Shipping
@using Nop.Core
@using Nop.Core.Domain.Customers
@using Nop.Plugin.Shipping.NovaPoshta
@using Nop.Plugin.Shipping.NovaPoshta.Domain
@using System.Text.Json
@using Nop.Core.Domain.Logging
@using Nop.Plugin.Shipping.NovaPoshta.Infrastructure.GenericAttributes
@using Nop.Plugin.Shipping.NovaPoshta.Models
@using Nop.Plugin.Shipping.NovaPoshta.Models.ModelFactories
@using Nop.Plugin.Shipping.NovaPoshta.Services
@using Nop.Services.Logging
@inject IGenericAttributeService _genericAttributeService
@inject IWorkContext _workContext
@inject IStoreContext _storeContext
@inject INpCustomerAddressService _customerAddressService
@inject INpService _npService
@inject INpOrderDataService _npOrderDataService
@inject ILogger _logger

@model Nop.Core.Domain.Orders.Order

@{
    //IF Model.Id equal 0, this means that Partial View has invoked in Checkout-sequence page (Order not created yet),
    //but if not, then it has invoked in customer info page (Order already created)
    if (Model.Id == 0)
    {
        var selectedShippingOption = await _genericAttributeService.GetAttributeAsync<ShippingOption>(
            await _workContext.GetCurrentCustomerAsync(),
            NopCustomerDefaults.SelectedShippingOptionAttribute,
            (await _storeContext.GetCurrentStoreAsync()).Id);

        if (selectedShippingOption.ShippingType == NovaPoshtaShippingType.WAREHOUSE.ToString())
        {
            var toWarehouseCustomerMainInfo = await _genericAttributeService.GetAttributeAsync<ToWarehouseCustomerMainInfo>(
                await _workContext.GetCurrentCustomerAsync(),
                NovaPoshtaDefaults.CustomerMainInfoForOrder,
                (await _storeContext.GetCurrentStoreAsync()).Id);

            var novaPoshtaWarehouse = await _npService.GetWarehouseByRef(toWarehouseCustomerMainInfo.WarehouseRef);
            await Html.RenderPartialAsync("_CheckoutOrderSummaryWarehouseShippingPartialView.cshtml", 
                new ShippingToWarehouseInfoModel(novaPoshtaWarehouse, toWarehouseCustomerMainInfo));
        }
        
        if (selectedShippingOption.ShippingType == NovaPoshtaShippingType.ADDRESS.ToString())
        {
            var customerAddressForOrderString = await _genericAttributeService.GetAttributeAsync<string>(
                await _workContext.GetCurrentCustomerAsync(),
                NovaPoshtaDefaults.CustomerAddressForOrder,
                (await _storeContext.GetCurrentStoreAsync()).Id);

            var customerAddressForOrder = JsonSerializer.Deserialize<NpCustomerAddressForOrder>(customerAddressForOrderString);
            await Html.RenderPartialAsync("_CheckoutOrderSummaryAddressShippingPartialView.cshtml", 
                new CustomerAddressForOrderModelFactory().BuildPartialViewModel(customerAddressForOrder, true));
        }
    }
    else
    {
        var orderShippingData = await _npOrderDataService.GetByOrderId(Model.Id);

        try
        {
            if (orderShippingData.ShippingType == NovaPoshtaShippingType.WAREHOUSE.ToString())
            {
                var toWarehouseCustomerMainInfo = await _genericAttributeService.GetAttributeAsync<ToWarehouseCustomerMainInfo>(
                    await _workContext.GetCurrentCustomerAsync(),
                    NovaPoshtaDefaults.CustomerMainInfoForOrder,
                    (await _storeContext.GetCurrentStoreAsync()).Id);
            
                var novaPoshtaWarehouse = await _npService.GetWarehouseByRef(toWarehouseCustomerMainInfo.WarehouseRef);
                await Html.RenderPartialAsync("_CheckoutOrderSummaryWarehouseShippingPartialView.cshtml", 
                    new ShippingToWarehouseInfoModel(novaPoshtaWarehouse, toWarehouseCustomerMainInfo));
            }
        
            if (orderShippingData.ShippingType == NovaPoshtaShippingType.ADDRESS.ToString())
            {
                var customerAddressForOrder = await _customerAddressService.GetAddressByOrder(Model);
                await Html.RenderPartialAsync("_CheckoutOrderSummaryAddressShippingPartialView.cshtml", 
                    new CustomerAddressForOrderModelFactory().BuildPartialViewModel(customerAddressForOrder, true));
            }
        }
        catch (Exception e)
        {
            await _logger.InsertLogAsync(
                LogLevel.Error,
                $"Nova Poshta plugin -> Failed to load additional shipping data for order (Id: {Model.Id})",
                 $"{e.Message} \n {e.StackTrace}",
                customer: await _workContext.GetCurrentCustomerAsync());
        }
    }
}