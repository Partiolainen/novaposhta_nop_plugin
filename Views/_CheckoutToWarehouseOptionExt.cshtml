@using Nop.Plugin.Shipping.NovaPoshta.Services
@using Nop.Plugin.Shipping.NovaPoshta.Domain
@using Nop.Core
@using Nop.Plugin.Shipping.NovaPoshta.Services.Factories
@using Nop.Services.Catalog
@using Nop.Services.Localization
@using Nop.Services.Orders
@model Nop.Core.Domain.Shipping.ShippingOption
@inject INpService _npService
@inject IWorkContext _workContext
@inject IShoppingCartService _shoppingCartService
@inject IProductService _productService
@inject ILocalizationService _localizationService
@inject IFactoriesService _factoriesService
@inject INpProductService _npProductService

<div >
    <style>
        option:disabled {
            color: lightgrey;
        }
    </style>

    <div class="card">
        <div class="card-header">
            <span style="font-weight: bold">@T(LocalizationConst.SelectBranch)</span>
        </div>
        <div class="card-body">
            <select asp-for="SelectedNpWarehouseRef" class="form-control form-control-sm" id="nova-poshta-warehouses-select" name="nova-poshta-selected-warehouses">
                @foreach (var warehouse in await _npService.GetWarehousesByAddress(Model.Address))
                {
                    @if (await WarehouseAvailability(warehouse))
                    {
                        <option value="@warehouse.Ref">
                            @warehouse.Description
                            (@warehouse.ReceivingLimitationsOnDimensions.Height/@warehouse.ReceivingLimitationsOnDimensions.Width/@warehouse.ReceivingLimitationsOnDimensions.Length)
                        </option>
                    }
                    else
                    {
                        <option value="@warehouse.Ref" disabled>
                            @warehouse.Description
                            (@warehouse.ReceivingLimitationsOnDimensions.Height/@warehouse.ReceivingLimitationsOnDimensions.Width/@warehouse.ReceivingLimitationsOnDimensions.Length)
                        </option>
                    }
                }
            </select>
        </div>
        <div class="card-footer">
            <p style="font-weight: bold; color: red">@Message</p>
        </div>
    </div>
    
    <div class="card" style="margin-top: 20px;">
        <div class="card-header">
            <span style="font-weight: bold">@T(LocalizationConst.RecipientMainDataTitle)</span>
        </div>
        <div class="card-body">
            <div style="padding: 2px; border: 1px solid lightgrey; border-radius: 3px">
                <div style="margin-bottom: 1px; font-size: 14px">
                    @await Component.InvokeAsync(
                        "TextInput",
                        new
                        {
                            title = await _localizationService.GetResourceAsync(LocalizationConst.FirstName),
                            id = "warehouse_recipient_first_name_input",
                            disabled = true,
                            value = Model.Address.FirstName
                        })
                </div>

                <div style="margin-bottom: 1px; font-size: 14px">
                    @await Component.InvokeAsync(
                        "TextInput",
                        new
                        {
                            title = await _localizationService.GetResourceAsync(LocalizationConst.LastName),
                            id = "warehouse_recipient_last_name_input",
                            disabled = true,
                            value = Model.Address.LastName
                        })
                </div>

                <div style="font-size: 14px">
                    @await Component.InvokeAsync(
                        "TextInput",
                        new
                        {
                            title = await _localizationService.GetResourceAsync(LocalizationConst.PhoneNumber),
                            id = "warehouse_recipient_phone_number_input",
                            disabled = true,
                            value = Model.Address.PhoneNumber
                        })
                </div>
            </div>
        </div>
        <div class="card-footer">
            <a href="#" onclick="Checkout.back(); return false;">@T(LocalizationConst.ChangeData)</a>
        </div>
    </div>
    
</div>

@functions
{
    public string Message { get; set; }
    
    private async Task<bool> WarehouseAvailability(NovaPoshtaWarehouse warehouse)
    {
        var currentCustomer = await _workContext.GetCurrentCustomerAsync();
        var shoppingCartItems = await _shoppingCartService.GetShoppingCartAsync(currentCustomer);
        var products = await _productService.GetProductsByIdsAsync(shoppingCartItems.Select(item => item.ProductId).ToArray());

        var result = true;
        
        foreach (var product in products)
        {
            result = result && await _npProductService.MatchDimensionsToWarehouse(product, warehouse);
            
            result = result && _npProductService.MatchWeightToWarehouse(product, warehouse);

            result = result && _npProductService.MatchDeclaredPriceToWarehouse(product, warehouse);
        }

        if (!result)
        {
            Message = await _localizationService.GetResourceAsync(LocalizationConst.WarehouseUnavailableMessage);
        }
        
        return result;
    }

    private bool FitParcel(Dimensions productDimensions, Dimensions npWarehouseDimensions)
    {
        return npWarehouseDimensions >= productDimensions;
    }
}
