@using Nop.Plugin.Shipping.NovaPoshta.Services
@using Nop.Plugin.Shipping.NovaPoshta.Domain
@using Nop.Core
@using Nop.Services.Catalog
@using Nop.Services.Localization
@using Nop.Services.Orders
@model Nop.Core.Domain.Shipping.ShippingOption
@inject INpService _npService
@inject IWorkContext _workContext
@inject IShoppingCartService _shoppingCartService
@inject IProductService _productService
@inject ILocalizationService _localizationService
@inject IWebHelper _webHelper

@{
    var storeLocation = _webHelper.GetStoreLocation();
}

<div >
    <style>
        option:disabled {
            color: lightgrey;
        }
    </style>
    
    <script>
        $(document).ready(() => {
            novaPoshtaSelectChange($('#nova-poshta-warehouses-select').val())
        })
        
        function novaPoshtaSelectChange(value) {
          console.log('Selector changed to ', value, 'route: ', '@(storeLocation)Plugins/NovaPoshta/SelectNpWarehouse');
          $.ajax({
            cache: false,
            url: '@(storeLocation)Plugins/NovaPoshtaShipping/SelectNpWarehouse',
            type: "POST",
            data: {warehouseRef: value},
            success: this.ajaxSuccess,
            error: this.ajaxError
          })
        }
    </script>
    
    <select asp-for="SelectedNpWarehouseRef" class="form-control form-control-sm" id="nova-poshta-warehouses-select" name="nova-poshta-selected-warehouses" onchange="novaPoshtaSelectChange(value)">
        @foreach (var warehouse in await _npService.GetWarehousesByAddress(Model.Address))
        {
            @if (await WarehouseAvailability(warehouse))
            {
                <option value="@warehouse.Ref">
                    @warehouse.Description
                    (@warehouse.ReceivingLimitationsOnDimensions.Height/@warehouse.ReceivingLimitationsOnDimensions.Width/@warehouse.ReceivingLimitationsOnDimensions.Length)
                </option>
            }
            else
            {
                <option value="@warehouse.Ref" disabled>
                    @warehouse.Description
                    (@warehouse.ReceivingLimitationsOnDimensions.Height/@warehouse.ReceivingLimitationsOnDimensions.Width/@warehouse.ReceivingLimitationsOnDimensions.Length)
                </option>
            }
        }
    </select>
    <p style="font-weight: bold; color: red">@Message</p>
</div>

@functions
{
    public string Message { get; set; }
    
    private async Task<bool> WarehouseAvailability(NovaPoshtaWarehouse warehouse)
    {
        var currentCustomer = await _workContext.GetCurrentCustomerAsync();
        var shoppingCartItems = await _shoppingCartService.GetShoppingCartAsync(currentCustomer);
        var products = await _productService.GetProductsByIdsAsync(shoppingCartItems.Select(item => item.ProductId).ToArray());

        var result = true;
        
        foreach (var product in products)
        {
            //Check for dimensions
            result = result && FitParcel(new Dimensions().SetDimensionsByProduct(product), warehouse.ReceivingLimitationsOnDimensions);
            
            //Check for max weight
            if (int.Parse(warehouse.PlaceMaxWeightAllowed) > 0)
            {
                result = result && product.Weight <= decimal.Parse(warehouse.PlaceMaxWeightAllowed);
            }
            else
            {
                if (int.Parse(warehouse.TotalMaxWeightAllowed) > 0)
                {
                    result = result && product.Weight <= decimal.Parse(warehouse.TotalMaxWeightAllowed);
                }
            }

            //Check for max declared price
            if (int.Parse(warehouse.MaxDeclaredCost) > 0)
            {
                result = result && product.Price <= decimal.Parse(warehouse.MaxDeclaredCost);
            }
        }

        if (!result)
        {
            Message = await _localizationService.GetResourceAsync(LocalizationConst.WarehouseUnavailableMessage);
        }
        
        return result;
    }

    private bool FitParcel(Dimensions productDimensions, Dimensions npWarehouseDimensions)
    {
        return npWarehouseDimensions >= productDimensions;
    }
}
