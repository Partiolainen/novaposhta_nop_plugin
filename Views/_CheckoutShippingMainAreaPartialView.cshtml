@using Nop.Plugin.Shipping.NovaPoshta.Domain
@using Nop.Core
@model CheckoutShippingMethodModel.ShippingMethodModel

@inject IWebHelper _webHelper

@{
    var storeLocation = _webHelper.GetStoreLocation();
}

<style>
    .card {
        border: 1px solid rgba(0, 0, 0, .125); 
        border-radius: 3px;
    }
    
    .card-header {
        border-bottom: 1px solid rgba(0, 0, 0, .125); 
        background-color: lightgrey;
        padding: 3px;
    }

    .card-body {
        padding: 2px;
    }
    
    .card-footer {
        border-top: 1px solid rgba(0, 0, 0, .125); 
        background-color: lightgrey;
        padding: 3px;
        display: flex;
        justify-content: flex-end;
    }
</style>

<script>
    ShippingMethod.validate = function() {
        
        let zipPostal = $('#zip_code_input').val();
        let area = $('#area_input').val();
        let region = $('#region_input').val();
        let city = $('#city_input').val();
        let street = $('#street_input').val();
        let house = $('#house_input').val();
                    
        let methods = document.getElementsByName('shippingoption');
        if (methods.length === 0) {
            alert(this.localized_data.NotAvailableMethodsError);
            return false;
        }               

        for (var i = 0; i < methods.length; i++) {
            if (methods[i].checked) {
                if (methods[i].id === 'shippingoption_ADDRESS') {
                    if (isNullOrEmpty(zipPostal) || isNullOrEmpty(area) || isNullOrEmpty(region) 
                    || isNullOrEmpty(city) || isNullOrEmpty(street) || isNullOrEmpty(house)) {
                        alert("Одно или несколько обязательных полей в адресе доставки не заполнено");
                        return false;
                    }
                }
                return true;
            }
        }
        alert(this.localized_data.SpecifyMethodError);
        return false;
    }
    
    ShippingMethod.save = function() {
        
        if (Checkout.loadWaiting !== false) return;
        
        if (this.validate()) {
            Checkout.setLoadWaiting('shipping-method');
            
            let methods = document.getElementsByName('shippingoption');
            if (methods.length === 0) {
                alert(this.localized_data.NotAvailableMethodsError);
                return false;
            }
            
            for (var i = 0; i < methods.length; i++) {
                if (methods[i].checked) {
                    if (methods[i].id === 'shippingoption_ADDRESS') {
                        const npCustomerAddressForOrder = {
                            FirstName: $('#first_name_input').val(),
                            LastName: $('#last_name_input').val(),
                            PhoneNumber: $('#phone_number_input').val(),
                            ZipPostalCode: $('#zip_code_input').val(),
                            Area: $('#area_input').val(),
                            Region: $('#region_input').val(),
                            City: $('#city_input').val(),
                            Street: $('#street_input').val(),
                            House: $('#house_input').val(),
                            Flat: $('#flat_input').val()
                        };
    
                        $.ajax({
                            cache: false,
                            url: '@(storeLocation)Plugins/NovaPoshtaShipping/SaveCheckoutShippingAddress',
                            data: npCustomerAddressForOrder,
                            type: 'POST',
                            error: Checkout.ajaxFailure
                        })
                    }
                    
                    if (methods[i].id === 'shippingoption_WAREHOUSE') {
                                
                        let warehouseRef = $('#nova-poshta-warehouses-select').val();
                        let firstName = $('#warehouse_recipient_first_name_input').val();
                        let lastName = $('#warehouse_recipient_last_name_input').val();
                        let phoneNumber = $('#warehouse_recipient_phone_number_input').val();
                        
                        $.ajax({
                            cache: false,
                            url: '@(storeLocation)Plugins/NovaPoshtaShipping/SelectNpWarehouse',
                            data: {warehouseRef, firstName, lastName, phoneNumber},
                            type: 'POST',
                            error: Checkout.ajaxFailure
                        })
                    }
                }
            }
            
            $.ajax({
                cache: false,
                url: this.saveUrl,
                data: $(this.form).serialize(),
                type: "POST",
                success: this.nextStep,
                complete: this.resetLoadWaiting,
                error: Checkout.ajaxFailure
            });
        }
    }
    
    function isNullOrEmpty(value) {
        return value == null || value === '';           
    }
    
</script>

<div>
    @if (Model.ShippingOption.ShippingType == NovaPoshtaShippingType.WAREHOUSE.ToString())
    {
        await Html.RenderPartialAsync("_CheckoutToWarehouseOptionExt.cshtml", Model.ShippingOption);
    }
    
    @if (Model.ShippingOption.ShippingType == NovaPoshtaShippingType.ADDRESS.ToString())
    {
        await Html.RenderPartialAsync("_CheckoutToAddressOptionExt.cshtml", Model.ShippingOption);
    }
    
</div>